<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TrboPortal</name>
    </assembly>
    <members>
        <member name="M:TrboPortal.Controllers.ApiController.GetRadios(System.Int32[])">
            <summary>List of all radios</summary>
            <param name="radioIds">Tags to filter by</param>
            <returns>successful operation</returns>
        </member>
        <member name="M:TrboPortal.Controllers.ApiController.UpdateRadioSettings(System.Collections.Generic.IEnumerable{TrboPortal.Model.Api.Radio})">
            <summary>Update gps mode and interval radios</summary>
            <param name="radioSettings">Radios to update</param>
        </member>
        <member name="M:TrboPortal.Controllers.ApiController.GetMostRecentGps(System.Int32[])">
            <summary>Returns last known GPS position of radio(s)</summary>
            <param name="ids">Radios</param>
            <returns>successful operation</returns>
        </member>
        <member name="M:TrboPortal.Controllers.ApiController.GetGpsHistory(System.Int32[],System.String,System.String)">
            <summary>Returns last known GPS position of radio(s)</summary>
            <param name="id">Radios</param>
            <param name="from">From TimeStamp for GPS measurements to get</param>
            <param name="through">Through TimeStamp for GPS measurements to get</param>
            <returns>successful operation</returns>
        </member>
        <member name="M:TrboPortal.Controllers.ApiController.RequestGpsUpdate(System.Int32[])">
            <summary>Request GPS opdate for radio(s)</summary>
            <param name="id">Radios</param>
            <returns>successful operation</returns>
        </member>
        <member name="M:TrboPortal.Controllers.ApiController.GetMessageQueue">
            <summary>TrboNet message queue</summary>
            <returns>Messages in TrboNet queue</returns>
        </member>
        <member name="M:TrboPortal.Controllers.ApiController.ClearMessageQueue(System.Int32[])">
            <summary>List of all radios</summary>
            <param name="id">Tags to filter by</param>
            <returns>successful operation</returns>
        </member>
        <member name="M:TrboPortal.Controllers.ApiController.GetSystemSettings">
            <summary>System settings</summary>
            <returns>Blaat</returns>
        </member>
        <member name="M:TrboPortal.Controllers.ApiController.SetSystemSettings(TrboPortal.Model.Api.SystemSettings)">
            <summary>Update System settings</summary>
            <param name="settings">System settings to store</param>
        </member>
        <member name="M:TrboPortal.Controllers.ApiController.GetLogging(System.String,System.String,System.String)">
            <summary>System logging</summary>
            <param name="loglevel">Log level filter of logging to return</param>
            <param name="from">DateTime From filter of logging to return</param>
            <param name="through">DateTime Through filter of logging to return</param>
            <returns>Blaat</returns>
        </member>
        <member name="M:TrboPortal.Controllers.ApiHelper.GetGpsMeasurementsAsync(System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32)">
            <summary>
            Returns a list of GpsMeasurements for specified devices. 
            </summary>
            <param name="ids">List of DeviceIds</param>
            <param name="from">Optional from filter</param>
            <param name="through">Optional through filter</param>
            <param name="limit">Limit to x amount of most recent GPSMeasurements</param>
            <returns></returns>
        </member>
        <member name="M:TrboPortal.CiaBata.CiaBata.PostGpsLocation(TrboPortal.CiaBata.GPSLocation)">
            <summary>
            Post the current location to ciabata
            </summary>
            <param name="gps"></param>
        </member>
        <member name="M:TrboPortal.CiaBata.CiaBata.PostDeviceLifeSign(System.Int32,System.String,System.Boolean)">
            <summary>
            Post a livesign to the server, for example for a radio or the server
            </summary>
            <param name="referenceID"></param>
            <param name="name"></param>
            <param name="online"></param>
        </member>
        <member name="T:TrboPortal.Model.Api.GpsModeEnum">
            <summary>GPS polling mode</summary>
        </member>
        <member name="T:TrboPortal.Model.Api.Radio">
            <summary>
            Class with (only) settings regarding this radio
            </summary>
        </member>
        <member name="P:TrboPortal.Model.Api.Radio.RequestInterval">
            <summary>GPS request interval in milliseconds</summary>
        </member>
        <member name="P:TrboPortal.Model.Api.SystemSettings.DefaultInterval">
            <example>test</example>
            <summary>hello</summary>
        </member>
        <member name="T:TrboPortal.Model.Db.GpsEntry">
            <summary>
            Model used for database storage, when changing please look into the default migration options of entityframework
            </summary>
        </member>
        <member name="T:TrboPortal.Model.Db.Radio">
            <summary>
            Model used for database storage, when changing please look into the default migration options of entityframework
            </summary>
        </member>
        <member name="M:TrboPortal.Model.Db.Repository.InsertOrUpdateAsync``1(``0)">
            <summary>
            Generic insert or update
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity"></param>
        </member>
        <member name="M:TrboPortal.Model.Db.Repository.InsertOrUpdateRadios(System.Collections.Generic.List{TrboPortal.Model.Db.Radio})">
            <summary>
            Insert or update Radio (based on key)
            </summary>
            <param name="settings"></param>
            <returns>Result of SaveChangesAsync</returns>
        </member>
        <member name="M:TrboPortal.Model.Db.Repository.GetRadiosById(System.Int32[])">
            <summary>
            Returns RadioSettings from DB for specified Radio ids. If list is empty, will return all Radios.
            Prints waring for all radio's that can't be found.
            </summary>
            <param name="radioIds">Ids to return, if empty, returns all radios</param>
            <returns></returns>
        </member>
        <member name="T:TrboPortal.Model.Db.LogEntry">
             <summary>
             Model used for database storage, when changing please look into the default migration options of entityframework
            </summary>
        </member>
        <member name="M:TrboPortal.Mappers.CiaBataMapper.ToGpsLocation(TrboPortal.Model.Api.GpsMeasurement)">
            <summary>
            Maps API GpsMeasurement to CiaBata GPSLocation
            </summary>
            <param name="gpsMeasurement"></param>
            <returns></returns>
        </member>
        <member name="M:TrboPortal.TrboNet.Queue`1.Remove(`0)">
            <summary>
            Remove all occurences of device from the queue
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:TrboPortal.TrboNet.Queue`1.Remove(`0,System.Func{`0,`0,System.Boolean})">
            <summary>
            Remove all occurences of device from the queue, matched by the compare function
            </summary>
            <param name="device"></param>
            <param name="comperator"></param>
            <returns></returns>
        </member>
        <member name="M:TrboPortal.TrboNet.Queue`1.Peek">
            <summary>
            See the first item of the queue
            </summary>
            <returns></returns>
        </member>
        <member name="M:TrboPortal.TrboNet.Queue`1.IsEmpty">
            <summary>
            Check if the queue is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:TrboPortal.TrboNet.Queue`1.Pop">
            <summary>
            Takes and returns the first value from the queue
            </summary>
            <returns></returns>
        </member>
        <member name="M:TrboPortal.TrboNet.Queue`1.GetQueue">
            <summary>
            Returns a copy of the queue
            </summary>
            <returns></returns>
        </member>
        <member name="M:TrboPortal.TrboNet.Queue`1.Jump(`0[])">
            <summary>
            Jump the queue, and add the entries to the beginning
            </summary>
            <param name="entries"></param>
        </member>
        <member name="M:TrboPortal.TrboNet.Queue`1.Add(`0[])">
            <summary>
            Add the entries to the end of the queue
            </summary>
            <param name="entries"></param>
        </member>
        <member name="M:TrboPortal.TrboNet.Queue`1.AddIfNotExists(`0[])">
            <summary>
            Add the entries to the end of the queue, if it is not already in the queue
            </summary>
            <param name="entries"></param>
        </member>
        <member name="T:TrboPortal.TrboNet.TurboController">
            <summary>
            Storing and retrieving settings
            </summary>
            <summary>
            TrboNet Specific logic
            </summary>
            <summary>
            Queueing logic
            </summary>
            <summary>
            Note, there are some other partial classes
            </summary>
        </member>
        <member name="M:TrboPortal.TrboNet.TurboController.PopulateQueue">
            <summary>
            populates the queue with devices that need an locationUpdate
            </summary>
        </member>
        <member name="M:TrboPortal.TrboNet.TurboController.PollForGps(System.Int32)">
            <summary>
            Bump the supplied radioID to the top of the queue, ensuring this Radio's GPS is polled next.
            </summary>
            <param name="radioID"></param>
            <exception cref="T:RadioNotFoundException"></exception>
            <exception cref="T:DeviceNotFoundException"></exception>
            <exception cref="T:InvalidGpsModeException">When Radio's GPS Mode is set to None</exception>
        </member>
        <member name="M:TrboPortal.TrboNet.TurboController.RemoveDeviceFromQueueByDeviceID(System.Int32[])">
            <summary>
            Remove all the entries from the queue with the given deviceID
            </summary>
            <param name="deviceID"></param>
        </member>
        <member name="M:CommaDelimitedArrayModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
            <summary>
            Borrowed from https://stackoverflow.com/a/19107738
            </summary>
            <param name="actionContext"></param>
            <param name="bindingContext"></param>
            <returns></returns>
        </member>
    </members>
</doc>
